// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"github.com/Soli0222/flow-sight/backend/internal/models"

	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBankAccountServiceInterface creates a new instance of MockBankAccountServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBankAccountServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBankAccountServiceInterface {
	mock := &MockBankAccountServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBankAccountServiceInterface is an autogenerated mock type for the BankAccountServiceInterface type
type MockBankAccountServiceInterface struct {
	mock.Mock
}

type MockBankAccountServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBankAccountServiceInterface) EXPECT() *MockBankAccountServiceInterface_Expecter {
	return &MockBankAccountServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateBankAccount provides a mock function for the type MockBankAccountServiceInterface
func (_mock *MockBankAccountServiceInterface) CreateBankAccount(account *models.BankAccount) error {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for CreateBankAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.BankAccount) error); ok {
		r0 = returnFunc(account)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBankAccountServiceInterface_CreateBankAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateBankAccount'
type MockBankAccountServiceInterface_CreateBankAccount_Call struct {
	*mock.Call
}

// CreateBankAccount is a helper method to define mock.On call
//   - account *models.BankAccount
func (_e *MockBankAccountServiceInterface_Expecter) CreateBankAccount(account interface{}) *MockBankAccountServiceInterface_CreateBankAccount_Call {
	return &MockBankAccountServiceInterface_CreateBankAccount_Call{Call: _e.mock.On("CreateBankAccount", account)}
}

func (_c *MockBankAccountServiceInterface_CreateBankAccount_Call) Run(run func(account *models.BankAccount)) *MockBankAccountServiceInterface_CreateBankAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.BankAccount
		if args[0] != nil {
			arg0 = args[0].(*models.BankAccount)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBankAccountServiceInterface_CreateBankAccount_Call) Return(err error) *MockBankAccountServiceInterface_CreateBankAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBankAccountServiceInterface_CreateBankAccount_Call) RunAndReturn(run func(account *models.BankAccount) error) *MockBankAccountServiceInterface_CreateBankAccount_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteBankAccount provides a mock function for the type MockBankAccountServiceInterface
func (_mock *MockBankAccountServiceInterface) DeleteBankAccount(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBankAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBankAccountServiceInterface_DeleteBankAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteBankAccount'
type MockBankAccountServiceInterface_DeleteBankAccount_Call struct {
	*mock.Call
}

// DeleteBankAccount is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockBankAccountServiceInterface_Expecter) DeleteBankAccount(id interface{}) *MockBankAccountServiceInterface_DeleteBankAccount_Call {
	return &MockBankAccountServiceInterface_DeleteBankAccount_Call{Call: _e.mock.On("DeleteBankAccount", id)}
}

func (_c *MockBankAccountServiceInterface_DeleteBankAccount_Call) Run(run func(id uuid.UUID)) *MockBankAccountServiceInterface_DeleteBankAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBankAccountServiceInterface_DeleteBankAccount_Call) Return(err error) *MockBankAccountServiceInterface_DeleteBankAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBankAccountServiceInterface_DeleteBankAccount_Call) RunAndReturn(run func(id uuid.UUID) error) *MockBankAccountServiceInterface_DeleteBankAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBankAccount provides a mock function for the type MockBankAccountServiceInterface
func (_mock *MockBankAccountServiceInterface) GetBankAccount(id uuid.UUID) (*models.BankAccount, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetBankAccount")
	}

	var r0 *models.BankAccount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.BankAccount, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.BankAccount); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.BankAccount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBankAccountServiceInterface_GetBankAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBankAccount'
type MockBankAccountServiceInterface_GetBankAccount_Call struct {
	*mock.Call
}

// GetBankAccount is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockBankAccountServiceInterface_Expecter) GetBankAccount(id interface{}) *MockBankAccountServiceInterface_GetBankAccount_Call {
	return &MockBankAccountServiceInterface_GetBankAccount_Call{Call: _e.mock.On("GetBankAccount", id)}
}

func (_c *MockBankAccountServiceInterface_GetBankAccount_Call) Run(run func(id uuid.UUID)) *MockBankAccountServiceInterface_GetBankAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBankAccountServiceInterface_GetBankAccount_Call) Return(bankAccount *models.BankAccount, err error) *MockBankAccountServiceInterface_GetBankAccount_Call {
	_c.Call.Return(bankAccount, err)
	return _c
}

func (_c *MockBankAccountServiceInterface_GetBankAccount_Call) RunAndReturn(run func(id uuid.UUID) (*models.BankAccount, error)) *MockBankAccountServiceInterface_GetBankAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetBankAccounts provides a mock function for the type MockBankAccountServiceInterface
func (_mock *MockBankAccountServiceInterface) GetBankAccounts() ([]models.BankAccount, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBankAccounts")
	}

	var r0 []models.BankAccount
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.BankAccount, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.BankAccount); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BankAccount)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBankAccountServiceInterface_GetBankAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBankAccounts'
type MockBankAccountServiceInterface_GetBankAccounts_Call struct {
	*mock.Call
}

// GetBankAccounts is a helper method to define mock.On call
func (_e *MockBankAccountServiceInterface_Expecter) GetBankAccounts() *MockBankAccountServiceInterface_GetBankAccounts_Call {
	return &MockBankAccountServiceInterface_GetBankAccounts_Call{Call: _e.mock.On("GetBankAccounts")}
}

func (_c *MockBankAccountServiceInterface_GetBankAccounts_Call) Run(run func()) *MockBankAccountServiceInterface_GetBankAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockBankAccountServiceInterface_GetBankAccounts_Call) Return(bankAccounts []models.BankAccount, err error) *MockBankAccountServiceInterface_GetBankAccounts_Call {
	_c.Call.Return(bankAccounts, err)
	return _c
}

func (_c *MockBankAccountServiceInterface_GetBankAccounts_Call) RunAndReturn(run func() ([]models.BankAccount, error)) *MockBankAccountServiceInterface_GetBankAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBankAccount provides a mock function for the type MockBankAccountServiceInterface
func (_mock *MockBankAccountServiceInterface) UpdateBankAccount(account *models.BankAccount) error {
	ret := _mock.Called(account)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBankAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.BankAccount) error); ok {
		r0 = returnFunc(account)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBankAccountServiceInterface_UpdateBankAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBankAccount'
type MockBankAccountServiceInterface_UpdateBankAccount_Call struct {
	*mock.Call
}

// UpdateBankAccount is a helper method to define mock.On call
//   - account *models.BankAccount
func (_e *MockBankAccountServiceInterface_Expecter) UpdateBankAccount(account interface{}) *MockBankAccountServiceInterface_UpdateBankAccount_Call {
	return &MockBankAccountServiceInterface_UpdateBankAccount_Call{Call: _e.mock.On("UpdateBankAccount", account)}
}

func (_c *MockBankAccountServiceInterface_UpdateBankAccount_Call) Run(run func(account *models.BankAccount)) *MockBankAccountServiceInterface_UpdateBankAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.BankAccount
		if args[0] != nil {
			arg0 = args[0].(*models.BankAccount)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockBankAccountServiceInterface_UpdateBankAccount_Call) Return(err error) *MockBankAccountServiceInterface_UpdateBankAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBankAccountServiceInterface_UpdateBankAccount_Call) RunAndReturn(run func(account *models.BankAccount) error) *MockBankAccountServiceInterface_UpdateBankAccount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCreditCardServiceInterface creates a new instance of MockCreditCardServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCreditCardServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCreditCardServiceInterface {
	mock := &MockCreditCardServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCreditCardServiceInterface is an autogenerated mock type for the CreditCardServiceInterface type
type MockCreditCardServiceInterface struct {
	mock.Mock
}

type MockCreditCardServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCreditCardServiceInterface) EXPECT() *MockCreditCardServiceInterface_Expecter {
	return &MockCreditCardServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateCreditCard provides a mock function for the type MockCreditCardServiceInterface
func (_mock *MockCreditCardServiceInterface) CreateCreditCard(creditCard *models.CreditCard) error {
	ret := _mock.Called(creditCard)

	if len(ret) == 0 {
		panic("no return value specified for CreateCreditCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.CreditCard) error); ok {
		r0 = returnFunc(creditCard)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCreditCardServiceInterface_CreateCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCreditCard'
type MockCreditCardServiceInterface_CreateCreditCard_Call struct {
	*mock.Call
}

// CreateCreditCard is a helper method to define mock.On call
//   - creditCard *models.CreditCard
func (_e *MockCreditCardServiceInterface_Expecter) CreateCreditCard(creditCard interface{}) *MockCreditCardServiceInterface_CreateCreditCard_Call {
	return &MockCreditCardServiceInterface_CreateCreditCard_Call{Call: _e.mock.On("CreateCreditCard", creditCard)}
}

func (_c *MockCreditCardServiceInterface_CreateCreditCard_Call) Run(run func(creditCard *models.CreditCard)) *MockCreditCardServiceInterface_CreateCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.CreditCard
		if args[0] != nil {
			arg0 = args[0].(*models.CreditCard)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCreditCardServiceInterface_CreateCreditCard_Call) Return(err error) *MockCreditCardServiceInterface_CreateCreditCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCreditCardServiceInterface_CreateCreditCard_Call) RunAndReturn(run func(creditCard *models.CreditCard) error) *MockCreditCardServiceInterface_CreateCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteCreditCard provides a mock function for the type MockCreditCardServiceInterface
func (_mock *MockCreditCardServiceInterface) DeleteCreditCard(id uuid.UUID) error {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCreditCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCreditCardServiceInterface_DeleteCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCreditCard'
type MockCreditCardServiceInterface_DeleteCreditCard_Call struct {
	*mock.Call
}

// DeleteCreditCard is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockCreditCardServiceInterface_Expecter) DeleteCreditCard(id interface{}) *MockCreditCardServiceInterface_DeleteCreditCard_Call {
	return &MockCreditCardServiceInterface_DeleteCreditCard_Call{Call: _e.mock.On("DeleteCreditCard", id)}
}

func (_c *MockCreditCardServiceInterface_DeleteCreditCard_Call) Run(run func(id uuid.UUID)) *MockCreditCardServiceInterface_DeleteCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCreditCardServiceInterface_DeleteCreditCard_Call) Return(err error) *MockCreditCardServiceInterface_DeleteCreditCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCreditCardServiceInterface_DeleteCreditCard_Call) RunAndReturn(run func(id uuid.UUID) error) *MockCreditCardServiceInterface_DeleteCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreditCard provides a mock function for the type MockCreditCardServiceInterface
func (_mock *MockCreditCardServiceInterface) GetCreditCard(id uuid.UUID) (*models.CreditCard, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCreditCard")
	}

	var r0 *models.CreditCard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.CreditCard, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.CreditCard); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CreditCard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreditCardServiceInterface_GetCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreditCard'
type MockCreditCardServiceInterface_GetCreditCard_Call struct {
	*mock.Call
}

// GetCreditCard is a helper method to define mock.On call
//   - id uuid.UUID
func (_e *MockCreditCardServiceInterface_Expecter) GetCreditCard(id interface{}) *MockCreditCardServiceInterface_GetCreditCard_Call {
	return &MockCreditCardServiceInterface_GetCreditCard_Call{Call: _e.mock.On("GetCreditCard", id)}
}

func (_c *MockCreditCardServiceInterface_GetCreditCard_Call) Run(run func(id uuid.UUID)) *MockCreditCardServiceInterface_GetCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 uuid.UUID
		if args[0] != nil {
			arg0 = args[0].(uuid.UUID)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCreditCardServiceInterface_GetCreditCard_Call) Return(creditCard *models.CreditCard, err error) *MockCreditCardServiceInterface_GetCreditCard_Call {
	_c.Call.Return(creditCard, err)
	return _c
}

func (_c *MockCreditCardServiceInterface_GetCreditCard_Call) RunAndReturn(run func(id uuid.UUID) (*models.CreditCard, error)) *MockCreditCardServiceInterface_GetCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreditCards provides a mock function for the type MockCreditCardServiceInterface
func (_mock *MockCreditCardServiceInterface) GetCreditCards() ([]models.CreditCard, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCreditCards")
	}

	var r0 []models.CreditCard
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.CreditCard, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.CreditCard); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.CreditCard)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCreditCardServiceInterface_GetCreditCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreditCards'
type MockCreditCardServiceInterface_GetCreditCards_Call struct {
	*mock.Call
}

// GetCreditCards is a helper method to define mock.On call
func (_e *MockCreditCardServiceInterface_Expecter) GetCreditCards() *MockCreditCardServiceInterface_GetCreditCards_Call {
	return &MockCreditCardServiceInterface_GetCreditCards_Call{Call: _e.mock.On("GetCreditCards")}
}

func (_c *MockCreditCardServiceInterface_GetCreditCards_Call) Run(run func()) *MockCreditCardServiceInterface_GetCreditCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCreditCardServiceInterface_GetCreditCards_Call) Return(creditCards []models.CreditCard, err error) *MockCreditCardServiceInterface_GetCreditCards_Call {
	_c.Call.Return(creditCards, err)
	return _c
}

func (_c *MockCreditCardServiceInterface_GetCreditCards_Call) RunAndReturn(run func() ([]models.CreditCard, error)) *MockCreditCardServiceInterface_GetCreditCards_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateCreditCard provides a mock function for the type MockCreditCardServiceInterface
func (_mock *MockCreditCardServiceInterface) UpdateCreditCard(creditCard *models.CreditCard) error {
	ret := _mock.Called(creditCard)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCreditCard")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.CreditCard) error); ok {
		r0 = returnFunc(creditCard)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCreditCardServiceInterface_UpdateCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCreditCard'
type MockCreditCardServiceInterface_UpdateCreditCard_Call struct {
	*mock.Call
}

// UpdateCreditCard is a helper method to define mock.On call
//   - creditCard *models.CreditCard
func (_e *MockCreditCardServiceInterface_Expecter) UpdateCreditCard(creditCard interface{}) *MockCreditCardServiceInterface_UpdateCreditCard_Call {
	return &MockCreditCardServiceInterface_UpdateCreditCard_Call{Call: _e.mock.On("UpdateCreditCard", creditCard)}
}

func (_c *MockCreditCardServiceInterface_UpdateCreditCard_Call) Run(run func(creditCard *models.CreditCard)) *MockCreditCardServiceInterface_UpdateCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *models.CreditCard
		if args[0] != nil {
			arg0 = args[0].(*models.CreditCard)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCreditCardServiceInterface_UpdateCreditCard_Call) Return(err error) *MockCreditCardServiceInterface_UpdateCreditCard_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCreditCardServiceInterface_UpdateCreditCard_Call) RunAndReturn(run func(creditCard *models.CreditCard) error) *MockCreditCardServiceInterface_UpdateCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIncomeServiceInterface creates a new instance of MockIncomeServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIncomeServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIncomeServiceInterface {
	mock := &MockIncomeServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockIncomeServiceInterface is an autogenerated mock type for the IncomeServiceInterface type
type MockIncomeServiceInterface struct {
	mock.Mock
}

type MockIncomeServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIncomeServiceInterface) EXPECT() *MockIncomeServiceInterface_Expecter {
	return &MockIncomeServiceInterface_Expecter{mock: &_m.Mock}
}

// GetIncomeSources provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) GetIncomeSources() ([]models.IncomeSource, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetIncomeSources")
	}

	var r0 []models.IncomeSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.IncomeSource, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.IncomeSource); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.IncomeSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockIncomeServiceInterface_GetIncomeSources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetIncomeSources'
type MockIncomeServiceInterface_GetIncomeSources_Call struct {
	*mock.Call
}

// GetIncomeSources is a helper method to define mock.On call
func (_e *MockIncomeServiceInterface_Expecter) GetIncomeSources() *MockIncomeServiceInterface_GetIncomeSources_Call {
	return &MockIncomeServiceInterface_GetIncomeSources_Call{Call: _e.mock.On("GetIncomeSources")}
}

func (_c *MockIncomeServiceInterface_GetIncomeSources_Call) Run(run func()) *MockIncomeServiceInterface_GetIncomeSources_Call {
	_c.Call.Run(func(args mock.Arguments) { run() })
	return _c
}

func (_c *MockIncomeServiceInterface_GetIncomeSources_Call) Return(sources []models.IncomeSource, err error) *MockIncomeServiceInterface_GetIncomeSources_Call {
	_c.Call.Return(sources, err)
	return _c
}

func (_c *MockIncomeServiceInterface_GetIncomeSources_Call) RunAndReturn(run func() ([]models.IncomeSource, error)) *MockIncomeServiceInterface_GetIncomeSources_Call {
	_c.Call.Return(run)
	return _c
}

// GetIncomeSource provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) GetIncomeSource(id uuid.UUID) (*models.IncomeSource, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetIncomeSource")
	}

	var r0 *models.IncomeSource
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.IncomeSource, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.IncomeSource); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.IncomeSource)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CreateIncomeSource provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) CreateIncomeSource(source *models.IncomeSource) error {
	ret := _mock.Called(source)
	if len(ret) == 0 {
		panic("no return value specified for CreateIncomeSource")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.IncomeSource) error); ok {
		r0 = returnFunc(source)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UpdateIncomeSource provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) UpdateIncomeSource(source *models.IncomeSource) error {
	ret := _mock.Called(source)
	if len(ret) == 0 {
		panic("no return value specified for UpdateIncomeSource")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.IncomeSource) error); ok {
		r0 = returnFunc(source)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DeleteIncomeSource provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) DeleteIncomeSource(id uuid.UUID) error {
	ret := _mock.Called(id)
	if len(ret) == 0 {
		panic("no return value specified for DeleteIncomeSource")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// GetMonthlyIncomeRecords provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) GetMonthlyIncomeRecords(incomeSourceID uuid.UUID) ([]models.MonthlyIncomeRecord, error) {
	ret := _mock.Called(incomeSourceID)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyIncomeRecords")
	}

	var r0 []models.MonthlyIncomeRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) ([]models.MonthlyIncomeRecord, error)); ok {
		return returnFunc(incomeSourceID)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) []models.MonthlyIncomeRecord); ok {
		r0 = returnFunc(incomeSourceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.MonthlyIncomeRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(incomeSourceID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// GetMonthlyIncomeRecord provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) GetMonthlyIncomeRecord(id uuid.UUID) (*models.MonthlyIncomeRecord, error) {
	ret := _mock.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMonthlyIncomeRecord")
	}

	var r0 *models.MonthlyIncomeRecord
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.MonthlyIncomeRecord, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.MonthlyIncomeRecord); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.MonthlyIncomeRecord)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// CreateMonthlyIncomeRecord provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) CreateMonthlyIncomeRecord(record *models.MonthlyIncomeRecord) error {
	ret := _mock.Called(record)
	if len(ret) == 0 {
		panic("no return value specified for CreateMonthlyIncomeRecord")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.MonthlyIncomeRecord) error); ok {
		r0 = returnFunc(record)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// UpdateMonthlyIncomeRecord provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) UpdateMonthlyIncomeRecord(record *models.MonthlyIncomeRecord) error {
	ret := _mock.Called(record)
	if len(ret) == 0 {
		panic("no return value specified for UpdateMonthlyIncomeRecord")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.MonthlyIncomeRecord) error); ok {
		r0 = returnFunc(record)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// DeleteMonthlyIncomeRecord provides a mock function for the type MockIncomeServiceInterface
func (_mock *MockIncomeServiceInterface) DeleteMonthlyIncomeRecord(id uuid.UUID) error {
	ret := _mock.Called(id)
	if len(ret) == 0 {
		panic("no return value specified for DeleteMonthlyIncomeRecord")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NewMockRecurringPaymentServiceInterface creates a new instance of MockRecurringPaymentServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRecurringPaymentServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRecurringPaymentServiceInterface {
	mock := &MockRecurringPaymentServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockRecurringPaymentServiceInterface is an autogenerated mock type for the RecurringPaymentServiceInterface type
type MockRecurringPaymentServiceInterface struct {
	mock.Mock
}

type MockRecurringPaymentServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRecurringPaymentServiceInterface) EXPECT() *MockRecurringPaymentServiceInterface_Expecter {
	return &MockRecurringPaymentServiceInterface_Expecter{mock: &_m.Mock}
}

func (_mock *MockRecurringPaymentServiceInterface) GetRecurringPayments() ([]models.RecurringPayment, error) {
	ret := _mock.Called()
	if len(ret) == 0 {
		panic("no return value specified for GetRecurringPayments")
	}
	var r0 []models.RecurringPayment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]models.RecurringPayment, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []models.RecurringPayment); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RecurringPayment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

func (_mock *MockRecurringPaymentServiceInterface) GetRecurringPayment(id uuid.UUID) (*models.RecurringPayment, error) {
	ret := _mock.Called(id)
	if len(ret) == 0 {
		panic("no return value specified for GetRecurringPayment")
	}
	var r0 *models.RecurringPayment
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) (*models.RecurringPayment, error)); ok {
		return returnFunc(id)
	}
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) *models.RecurringPayment); ok {
		r0 = returnFunc(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RecurringPayment)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = returnFunc(id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

func (_mock *MockRecurringPaymentServiceInterface) CreateRecurringPayment(payment *models.RecurringPayment) error {
	ret := _mock.Called(payment)
	if len(ret) == 0 {
		panic("no return value specified for CreateRecurringPayment")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.RecurringPayment) error); ok {
		r0 = returnFunc(payment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

func (_mock *MockRecurringPaymentServiceInterface) UpdateRecurringPayment(payment *models.RecurringPayment) error {
	ret := _mock.Called(payment)
	if len(ret) == 0 {
		panic("no return value specified for UpdateRecurringPayment")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*models.RecurringPayment) error); ok {
		r0 = returnFunc(payment)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

func (_mock *MockRecurringPaymentServiceInterface) DeleteRecurringPayment(id uuid.UUID) error {
	ret := _mock.Called(id)
	if len(ret) == 0 {
		panic("no return value specified for DeleteRecurringPayment")
	}
	var r0 error
	if returnFunc, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = returnFunc(id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// NOTE: Auth has been removed from the application.
// The following AuthServiceInterface mocks are disabled to avoid build errors:
/*
	// NewMockAuthServiceInterface creates a new instance of MockAuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
	// The first argument is typically a *testing.T value.
	func NewMockAuthServiceInterface(t interface {
		mock.TestingT
		Cleanup(func())
	}) *MockAuthServiceInterface {
		mock := &MockAuthServiceInterface{}
		mock.Mock.Test(t)

		t.Cleanup(func() { mock.AssertExpectations(t) })

		return mock
	}

	// MockAuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
	type MockAuthServiceInterface struct {
		mock.Mock
	}

	type MockAuthServiceInterface_Expecter struct {
		mock *mock.Mock
	}

	func (_m *MockAuthServiceInterface) EXPECT() *MockAuthServiceInterface_Expecter {
		return &MockAuthServiceInterface_Expecter{mock: &_m.Mock}
	}

	// GenerateJWT provides a mock function for the type MockAuthServiceInterface
	func (_mock *MockAuthServiceInterface) GenerateJWT(user *models.User) (string, error) {
		ret := _mock.Called(user)

		if len(ret) == 0 {
			panic("no return value specified for GenerateJWT")
		}

		var r0 string
		var r1 error
		if returnFunc, ok := ret.Get(0).(func(*models.User) (string, error)); ok {
			return returnFunc(user)
		}
		if returnFunc, ok := ret.Get(0).(func(*models.User) string); ok {
			r0 = returnFunc(user)
		} else {
			r0 = ret.Get(0).(string)
		}
		if returnFunc, ok := ret.Get(1).(func(*models.User) error); ok {
			r1 = returnFunc(user)
		} else {
			r1 = ret.Error(1)
		}
		return r0, r1
	}

	// MockAuthServiceInterface_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
	type MockAuthServiceInterface_GenerateJWT_Call struct {
		*mock.Call
	}

	// GenerateJWT is a helper method to define mock.On call
	//   - user *models.User
	func (_e *MockAuthServiceInterface_Expecter) GenerateJWT(user interface{}) *MockAuthServiceInterface_GenerateJWT_Call {
		return &MockAuthServiceInterface_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", user)}
	}

	func (_c *MockAuthServiceInterface_GenerateJWT_Call) Run(run func(user *models.User)) *MockAuthServiceInterface_GenerateJWT_Call {
		_c.Call.Run(func(args mock.Arguments) {
			var arg0 *models.User
			if args[0] != nil {
				arg0 = args[0].(*models.User)
			}
			run(
				arg0,
			)
		})
		return _c
	}

	func (_c *MockAuthServiceInterface_GenerateJWT_Call) Return(s string, err error) *MockAuthServiceInterface_GenerateJWT_Call {
		_c.Call.Return(s, err)
		return _c
	}

	func (_c *MockAuthServiceInterface_GenerateJWT_Call) RunAndReturn(run func(user *models.User) (string, error)) *MockAuthServiceInterface_GenerateJWT_Call {
		_c.Call.Return(run)
		return _c
	}

	// GetGoogleAuthURL provides a mock function for the type MockAuthServiceInterface
	func (_mock *MockAuthServiceInterface) GetGoogleAuthURL(state string) string {
		ret := _mock.Called(state)

		if len(ret) == 0 {
			panic("no return value specified for GetGoogleAuthURL")
		}

		var r0 string
		if returnFunc, ok := ret.Get(0).(func(string) string); ok {
			r0 = returnFunc(state)
		} else {
			r0 = ret.Get(0).(string)
		}
		return r0
	}

	// MockAuthServiceInterface_GetGoogleAuthURL_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGoogleAuthURL'
	type MockAuthServiceInterface_GetGoogleAuthURL_Call struct {
		*mock.Call
	}

	// GetGoogleAuthURL is a helper method to define mock.On call
	//   - state string
	func (_e *MockAuthServiceInterface_Expecter) GetGoogleAuthURL(state interface{}) *MockAuthServiceInterface_GetGoogleAuthURL_Call {
		return &MockAuthServiceInterface_GetGoogleAuthURL_Call{Call: _e.mock.On("GetGoogleAuthURL", state)}
	}

	func (_c *MockAuthServiceInterface_GetGoogleAuthURL_Call) Run(run func(state string)) *MockAuthServiceInterface_GetGoogleAuthURL_Call {
		_c.Call.Run(func(args mock.Arguments) {
			var arg0 string
			if args[0] != nil {
				arg0 = args[0].(string)
			}
			run(
				arg0,
			)
		})
		return _c
	}

	func (_c *MockAuthServiceInterface_GetGoogleAuthURL_Call) Return(s string) *MockAuthServiceInterface_GetGoogleAuthURL_Call {
		_c.Call.Return(s)
		return _c
	}

	func (_c *MockAuthServiceInterface_GetGoogleAuthURL_Call) RunAndReturn(run func(state string) string) *MockAuthServiceInterface_GetGoogleAuthURL_Call {
		_c.Call.Return(run)
		return _c
	}

	// GetUserByID provides a mock function for the type MockAuthServiceInterface
	func (_mock *MockAuthServiceInterface) GetUserByID(userID string) (*models.User, error) {
		ret := _mock.Called(userID)

		if len(ret) == 0 {
			panic("no return value specified for GetUserByID")
		}

		var r0 *models.User
		var r1 error
		if returnFunc, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
			return returnFunc(userID)
		}
		if returnFunc, ok := ret.Get(0).(func(string) *models.User); ok {
			r0 = returnFunc(userID)
		} else {
			if ret.Get(0) != nil {
				r0 = ret.Get(0).(*models.User)
			}
		}
		if returnFunc, ok := ret.Get(1).(func(string) error); ok {
			r1 = returnFunc(userID)
		} else {
			r1 = ret.Error(1)
		}
		return r0, r1
	}

	// MockAuthServiceInterface_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
	type MockAuthServiceInterface_GetUserByID_Call struct {
		*mock.Call
	}

	// GetUserByID is a helper method to define mock.On call
	//   - userID string
	func (_e *MockAuthServiceInterface_Expecter) GetUserByID(userID interface{}) *MockAuthServiceInterface_GetUserByID_Call {
		return &MockAuthServiceInterface_GetUserByID_Call{Call: _e.mock.On("GetUserByID", userID)}
	}

	func (_c *MockAuthServiceInterface_GetUserByID_Call) Run(run func(userID string)) *MockAuthServiceInterface_GetUserByID_Call {
		_c.Call.Run(func(args mock.Arguments) {
			var arg0 string
			if args[0] != nil {
				arg0 = args[0].(string)
			}
			run(
				arg0,
			)
		})
		return _c
	}

	func (_c *MockAuthServiceInterface_GetUserByID_Call) Return(user *models.User, err error) *MockAuthServiceInterface_GetUserByID_Call {
		_c.Call.Return(user, err)
		return _c
	}

	func (_c *MockAuthServiceInterface_GetUserByID_Call) RunAndReturn(run func(userID string) (*models.User, error)) *MockAuthServiceInterface_GetUserByID_Call {
		_c.Call.Return(run)
		return _c
	}

	// HandleGoogleCallback provides a mock function for the type MockAuthServiceInterface
	func (_mock *MockAuthServiceInterface) HandleGoogleCallback(code string) (*models.User, string, error) {
		ret := _mock.Called(code)

		if len(ret) == 0 {
			panic("no return value specified for HandleGoogleCallback")
		}

		var r0 *models.User
		var r1 string
		var r2 error
		if returnFunc, ok := ret.Get(0).(func(string) (*models.User, string, error)); ok {
			return returnFunc(code)
		}
		if returnFunc, ok := ret.Get(0).(func(string) *models.User); ok {
			r0 = returnFunc(code)
		} else {
			if ret.Get(0) != nil {
				r0 = ret.Get(0).(*models.User)
			}
		}
		if returnFunc, ok := ret.Get(1).(func(string) string); ok {
			r1 = returnFunc(code)
		} else {
			r1 = ret.Get(1).(string)
		}
		if returnFunc, ok := ret.Get(2).(func(string) error); ok {
			r2 = returnFunc(code)
		} else {
			r2 = ret.Error(2)
		}
		return r0, r1, r2
	}

	// MockAuthServiceInterface_HandleGoogleCallback_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleGoogleCallback'
	type MockAuthServiceInterface_HandleGoogleCallback_Call struct {
		*mock.Call
	}

	// HandleGoogleCallback is a helper method to define mock.On call
	//   - code string
	func (_e *MockAuthServiceInterface_Expecter) HandleGoogleCallback(code interface{}) *MockAuthServiceInterface_HandleGoogleCallback_Call {
		return &MockAuthServiceInterface_HandleGoogleCallback_Call{Call: _e.mock.On("HandleGoogleCallback", code)}
	}

	func (_c *MockAuthServiceInterface_HandleGoogleCallback_Call) Run(run func(code string)) *MockAuthServiceInterface_HandleGoogleCallback_Call {
		_c.Call.Run(func(args mock.Arguments) {
			var arg0 string
			if args[0] != nil {
				arg0 = args[0].(string)
			}
			run(
				arg0,
			)
		})
		return _c
	}

	func (_c *MockAuthServiceInterface_HandleGoogleCallback_Call) Return(user *models.User, s string, err error) *MockAuthServiceInterface_HandleGoogleCallback_Call {
		_c.Call.Return(user, s, err)
		return _c
	}

	func (_c *MockAuthServiceInterface_HandleGoogleCallback_Call) RunAndReturn(run func(code string) (*models.User, string, error)) *MockAuthServiceInterface_HandleGoogleCallback_Call {
		_c.Call.Return(run)
		return _c
	}

	// ValidateJWT provides a mock function for the type MockAuthServiceInterface
	func (_mock *MockAuthServiceInterface) ValidateJWT(tokenString string) (*services.Claims, error) {
		ret := _mock.Called(tokenString)

		if len(ret) == 0 {
			panic("no return value specified for ValidateJWT")
		}

		var r0 *services.Claims
		var r1 error
		if returnFunc, ok := ret.Get(0).(func(string) (*services.Claims, error)); ok {
			return returnFunc(tokenString)
		}
		if returnFunc, ok := ret.Get(0).(func(string) *services.Claims); ok {
			r0 = returnFunc(tokenString)
		} else {
			if ret.Get(0) != nil {
				r0 = ret.Get(0).(*services.Claims)
			}
		}
		if returnFunc, ok := ret.Get(1).(func(string) error); ok {
			r1 = returnFunc(tokenString)
		} else {
			r1 = ret.Error(1)
		}
		return r0, r1
	}

	// MockAuthServiceInterface_ValidateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateJWT'
	type MockAuthServiceInterface_ValidateJWT_Call struct {
		*mock.Call
	}

	// ValidateJWT is a helper method to define mock.On call
	//   - tokenString string
	func (_e *MockAuthServiceInterface_Expecter) ValidateJWT(tokenString interface{}) *MockAuthServiceInterface_ValidateJWT_Call {
		return &MockAuthServiceInterface_ValidateJWT_Call{Call: _e.mock.On("ValidateJWT", tokenString)}
	}

	func (_c *MockAuthServiceInterface_ValidateJWT_Call) Run(run func(tokenString string)) *MockAuthServiceInterface_ValidateJWT_Call {
		_c.Call.Run(func(args mock.Arguments) {
			var arg0 string
			if args[0] != nil {
				arg0 = args[0].(string)
			}
			run(
				arg0,
			)
		})
		return _c
	}

	func (_c *MockAuthServiceInterface_ValidateJWT_Call) Return(claims *services.Claims, err error) *MockAuthServiceInterface_ValidateJWT_Call {
		_c.Call.Return(claims, err)
		return _c
	}

	func (_c *MockAuthServiceInterface_ValidateJWT_Call) RunAndReturn(run func(tokenString string) (*services.Claims, error)) *MockAuthServiceInterface_ValidateJWT_Call {
		_c.Call.Return(run)
		return _c
	}
*/
